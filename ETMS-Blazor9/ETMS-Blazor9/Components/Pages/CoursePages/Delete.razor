@page "/courses/delete"
@using Microsoft.EntityFrameworkCore
@using ETMS.Data
@inject IDbContextFactory<ETMSContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Course</PageTitle>


<div class="row mb-2 border-bottom">
    <div class="col-md-8">
        <h5>Delet Course</h5>
    </div>
    <div class="col-md-4">
        <a type="button" class="btn btn-dark btn-sm float-end mb-2" href="course-managment"> <span class="oi oi-arrow-thick-left me-2"></span>Back to Listing</a>
    </div>
</div>

<div class="alert alert-danger" role="alert">
    Are you sure you want to delete this?
</div>

<div>
    @if (course is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        @* <dl class="row"> *@
        @*     <dt class="col-sm-2">RowId</dt> *@
        @*     <dd class="col-sm-10">@course.RowId</dd> *@
        @* </dl> *@
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@course.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@course.Code</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@course.Description</dd>
        </dl>
        @* <dl class="row"> *@
        @*     <dt class="col-sm-2">IsCompleted</dt> *@
        @*     <dd class="col-sm-10">@course.IsCompleted</dd> *@
        @* </dl> *@
        <EditForm method="post" Model="course" OnValidSubmit="DeleteCourse" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(course is null)">Delete</button> 
        </EditForm>
    }
</div>

@code {
    private Course? course;

    [SupplyParameterFromQuery]
    private int CourseID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        course = await context.Course.FirstOrDefaultAsync(m => m.CourseID == CourseID);

        if (course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Course.Remove(course!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/course-managment");
    }
}

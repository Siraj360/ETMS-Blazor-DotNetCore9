@page "/employeecourses/create"
@using Microsoft.EntityFrameworkCore
@using ETMS.Data
@inject IDbContextFactory<ETMSContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>EmployeeCourse</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="EmployeeCourse" OnValidSubmit="AddEmployeeCourse" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="employeeid" class="form-label">EmployeeID:</label> 
                <InputNumber id="employeeid" @bind-Value="EmployeeCourse.EmployeeID" class="form-control" /> 
                <ValidationMessage For="() => EmployeeCourse.EmployeeID" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="courseid" class="form-label">CourseID:</label> 
                <InputNumber id="courseid" @bind-Value="EmployeeCourse.CourseID" class="form-control" /> 
                <ValidationMessage For="() => EmployeeCourse.CourseID" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="iscomplete" class="form-label">isComplete:</label> 
                <InputCheckbox id="iscomplete" @bind-Value="EmployeeCourse.isComplete" class="form-check-input" /> 
                <ValidationMessage For="() => EmployeeCourse.isComplete" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="completedon" class="form-label">CompletedOn:</label> 
                <InputDate id="completedon" @bind-Value="EmployeeCourse.CompletedOn" class="form-control" /> 
                <ValidationMessage For="() => EmployeeCourse.CompletedOn" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedon" class="form-label">UpdatedOn:</label> 
                <InputDate id="updatedon" @bind-Value="EmployeeCourse.UpdatedOn" class="form-control" /> 
                <ValidationMessage For="() => EmployeeCourse.UpdatedOn" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="assignedon" class="form-label">AssignedOn:</label> 
                <InputDate id="assignedon" @bind-Value="EmployeeCourse.AssignedOn" class="form-control" /> 
                <ValidationMessage For="() => EmployeeCourse.AssignedOn" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/employeecourses">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private EmployeeCourse EmployeeCourse { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEmployeeCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.EmployeeCourse.Add(EmployeeCourse);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employeecourses");
    }
}

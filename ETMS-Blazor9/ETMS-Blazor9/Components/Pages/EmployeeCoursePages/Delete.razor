@page "/employeecourses/delete"
@using Microsoft.EntityFrameworkCore
@using ETMS.Data
@inject IDbContextFactory<ETMSContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>EmployeeCourse</h2>
    <hr />
    @if (employeecourse is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">EmployeeID</dt>
            <dd class="col-sm-10">@employeecourse.EmployeeID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CourseID</dt>
            <dd class="col-sm-10">@employeecourse.CourseID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">isComplete</dt>
            <dd class="col-sm-10">@employeecourse.isComplete</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompletedOn</dt>
            <dd class="col-sm-10">@employeecourse.CompletedOn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedOn</dt>
            <dd class="col-sm-10">@employeecourse.UpdatedOn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AssignedOn</dt>
            <dd class="col-sm-10">@employeecourse.AssignedOn</dd>
        </dl>
        <EditForm method="post" Model="employeecourse" OnValidSubmit="DeleteEmployeeCourse" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(employeecourse is null)">Delete</button> |
            <a href="/employeecourses">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private EmployeeCourse? employeecourse;

    [SupplyParameterFromQuery]
    private int EmployeeCourseID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employeecourse = await context.EmployeeCourse.FirstOrDefaultAsync(m => m.EmployeeCourseID == EmployeeCourseID);

        if (employeecourse is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmployeeCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.EmployeeCourse.Remove(employeecourse!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employeecourses");
    }
}

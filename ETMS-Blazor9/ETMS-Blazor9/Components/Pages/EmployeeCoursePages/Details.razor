@page "/employeecourses/details"
@using Microsoft.EntityFrameworkCore
@using ETMS.Data
@inject IDbContextFactory<ETMSContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>EmployeeCourse</h2>
    <hr />
    @if (employeecourse is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">EmployeeID</dt>
            <dd class="col-sm-10">@employeecourse.EmployeeID</dd>
            <dt class="col-sm-2">CourseID</dt>
            <dd class="col-sm-10">@employeecourse.CourseID</dd>
            <dt class="col-sm-2">isComplete</dt>
            <dd class="col-sm-10">@employeecourse.isComplete</dd>
            <dt class="col-sm-2">CompletedOn</dt>
            <dd class="col-sm-10">@employeecourse.CompletedOn</dd>
            <dt class="col-sm-2">UpdatedOn</dt>
            <dd class="col-sm-10">@employeecourse.UpdatedOn</dd>
            <dt class="col-sm-2">AssignedOn</dt>
            <dd class="col-sm-10">@employeecourse.AssignedOn</dd>
        </dl>
        <div>
            <a href="@($"/employeecourses/edit?employeecourseid={employeecourse.EmployeeCourseID}")">Edit</a> |
            <a href="@($"/employeecourses")">Back to List</a>
        </div>
    }
</div>

@code {
    private EmployeeCourse? employeecourse;

    [SupplyParameterFromQuery]
    private int EmployeeCourseID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employeecourse = await context.EmployeeCourse.FirstOrDefaultAsync(m => m.EmployeeCourseID == EmployeeCourseID);

        if (employeecourse is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

@page "/employees/edit"
@using Microsoft.EntityFrameworkCore
@using ETMS.Data
@inject IDbContextFactory<ETMSContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Employee</PageTitle>


<div class="row mb-2 border-bottom">
    <div class="col-md-8">
        <h5>Edit Employee</h5>
    </div>
    <div class="col-md-4">
        <a type="button" class="btn btn-dark btn-sm float-end mb-2" href="employee-admin"><span class="oi oi-arrow-thick-left me-2"></span>Back to Listing</a>
    </div>
</div>

@if (Employee is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Employee" OnValidSubmit="UpdateEmployee" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Employee.EmployeeID" value="@Employee.EmployeeID" />
                @* <div class="mb-3"> *@
                @*     <label for="rowid" class="form-label">RowId:</label> *@
                @*     <InputText id="rowid" @bind-Value="Employee.RowId" class="form-control" /> *@
                @*     <ValidationMessage For="() => Employee.RowId" class="text-danger" /> *@
                @* </div> *@

                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Employee.Name" class="form-control" />
                    <ValidationMessage For="() => Employee.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="hiredate" class="form-label">HireDate:</label>
                    <InputDate id="hiredate" @bind-Value="Employee.HireDate" class="form-control" />
                    <ValidationMessage For="() => Employee.HireDate" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    private int EmployeeID { get; set; }

    [SupplyParameterFromForm]
    private Employee? Employee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Employee ??= await context.Employee.FirstOrDefaultAsync(m => m.EmployeeID == EmployeeID);

        if (Employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }else
        {
            Employee.RowId = Guid.NewGuid().ToString();
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Employee!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmployeeExists(Employee!.EmployeeID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("employee-admin");
    }

    private bool EmployeeExists(int employeeid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Employee.Any(e => e.EmployeeID == employeeid);
    }
}
